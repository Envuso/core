(()=>{var e={6170:(e,t,r)=>{"use strict";function n(e){var t="function"==typeof Map?new Map:void 0;return(n=function(e){if(null===e||(r=e,-1===Function.toString.call(r).indexOf("[native code]")))return e;var r;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,n)}function n(){return o(e,arguments,a(this).constructor)}return n.prototype=Object.create(e.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),c(n,e)})(e)}function o(e,t,r){return(o=i()?Reflect.construct:function(e,t,r){var n=[null];n.push.apply(n,t);var o=new(Function.bind.apply(e,n));return r&&c(o,r.prototype),o}).apply(null,arguments)}function i(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function c(e,t){return(c=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function a(e){return(a=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.Exception=void 0;const u=r(8823);let s=function(e){var t,r;function n(t,r=u.StatusCodes.INTERNAL_SERVER_ERROR){var n;return(n=e.call(this,t)||this).response={},n._code=r,n.response={message:n.message},n}return r=e,(t=n).prototype=Object.create(r.prototype),t.prototype.constructor=t,c(t,r),n.prototype.code=function(){return this._code},n}(n(Error));t.Exception=s},5695:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ExceptionHandler=void 0;const n=r(9722),o=r(4065),i=r(6170),c=r(7064),a=r(4567);let u=function(){function e(){}return e.transform=function(e,t){return e instanceof a.ValidationException||e instanceof c.UnauthorisedException?this.responseFor(e,t):(e instanceof n.JsonWebTokenError&&(e=new c.UnauthorisedException(e.message)),e instanceof n.TokenExpiredError&&(e=new c.UnauthorisedException(e.message)),e instanceof i.Exception?t.status(e.code()).send(e.response):(o.Log.error(e.toString()),console.trace(e),t.status(500).send(e)))},e.responseFor=function(e,t){return t.status(e.code()).send(e.response)},e}();t.ExceptionHandler=u},7064:(e,t,r)=>{"use strict";function n(e,t){return(n=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}Object.defineProperty(t,"__esModule",{value:!0}),t.UnauthorisedException=void 0;const o=r(8823);let i=function(e){var t,r;function i(t){return e.call(this,null!=t?t:"Unauthorised.",o.StatusCodes.UNAUTHORIZED)||this}return r=e,(t=i).prototype=Object.create(r.prototype),t.prototype.constructor=t,n(t,r),i}(r(6170).Exception);t.UnauthorisedException=i},4567:(e,t,r)=>{"use strict";function n(e,t){return(n=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}Object.defineProperty(t,"__esModule",{value:!0}),t.ValidationException=void 0;const o=r(516),i=r(8823);let c=function(e){var t,r;function c(t){var r;return(r=e.call(this,"Woops something went wrong.",i.StatusCodes.UNPROCESSABLE_ENTITY)||this).errors={},r.errors=t,r.response={message:r.message,errors:r.processErrors()},r}return r=e,(t=c).prototype=Object.create(r.prototype),t.prototype.constructor=t,n(t,r),c.message=function(e){const t=new c([e]);return t.message=e,t},c.prototype.processErrors=function(){let e={};if(Array.isArray(this.errors)){if(!this.errors.length)return e;const t=this.errors[0]||null;if(!t)return e;if(t instanceof o.ValidationError){for(let t of this.errors)e[t.property]=Object.values(t.constraints)[0]||null;return e}return e}return e=Object.assign(Object.assign({},this.errors),e),e},c}(r(6170).Exception);t.ValidationException=c},1507:function(e,t,r){"use strict";function n(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,o(e,t)}function o(e,t){return(o=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var i=this&&this.__decorate||function(e,t,r,n){var o,i=arguments.length,c=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)c=Reflect.decorate(e,t,r,n);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(c=(i<3?o(c):i>3?o(t,r,c):o(t,r))||c);return i>3&&c&&Object.defineProperty(t,r,c),c},c=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},a=this&&this.__param||function(e,t){return function(r,n){t(r,n,e)}},u=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function c(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(c,a)}u((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.AuthController=void 0;const s=r(4567),l=r(763),f=r(9510),d=r(4065),p=r(1576),h=r(516);let y=function(e){function t(){return e.apply(this,arguments)||this}return n(t,e),t}(d.DataTransferObject);i([h.IsEmail(),h.IsNotEmpty(),c("design:type",String)],y.prototype,"email",void 0),i([h.Length(8,255),c("design:type",String)],y.prototype,"password",void 0);let v=function(e){function t(){return e.apply(this,arguments)||this}return n(t,e),t}(y);i([h.IsNotEmpty(),h.Length(3,25),c("design:type",String)],v.prototype,"displayName",void 0),i([p.Transform((({value:e})=>e.toLowerCase())),h.IsString(),h.IsAlphanumeric(),h.Length(3,20),c("design:type",String)],v.prototype,"name",void 0);let _=function(e){function t(){return e.apply(this,arguments)||this}n(t,e);var r=t.prototype;return r.login=function(e){return u(this,void 0,void 0,(function*(){if(!(yield d.Auth.attempt(e)))throw new s.ValidationException({message:"Invalid credentials"});return d.response().json({user:d.Auth.user(),token:d.Auth.user().generateToken()})}))},r.register=function(e){return u(this,void 0,void 0,(function*(){if(!(yield d.Auth.canRegisterAs(e)))throw new s.ValidationException({username:"Username is in use."});const t=yield f.User.create({name:e.name,email:e.email,password:yield d.Hash.make(e.password),displayName:e.displayName,createdAt:new Date});return d.Auth.loginAs(t),{user:d.Auth.user(),token:d.Auth.user().generateToken()}}))},r.authedUser=function(){return u(this,void 0,void 0,(function*(){return{contextUser:d.HttpContext.get().user,authUser:d.Auth.user()}}))},t}(d.Controller);i([d.post("/login"),a(0,d.dto()),c("design:type",Function),c("design:paramtypes",[y]),c("design:returntype",Promise)],_.prototype,"login",null),i([d.post("/register"),a(0,d.dto()),c("design:type",Function),c("design:paramtypes",[v]),c("design:returntype",Promise)],_.prototype,"register",null),i([d.middleware(new l.AuthorizationMiddleware),d.get("/user"),c("design:type",Function),c("design:paramtypes",[]),c("design:returntype",Promise)],_.prototype,"authedUser",null),_=i([d.controller("/auth")],_),t.AuthController=_},763:function(e,t,r){"use strict";function n(e,t){return(n=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var o=this&&this.__decorate||function(e,t,r,n){var o,i=arguments.length,c=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)c=Reflect.decorate(e,t,r,n);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(c=(i<3?o(c):i>3?o(t,r,c):o(t,r))||c);return i>3&&c&&Object.defineProperty(t,r,c),c},i=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function c(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(c,a)}u((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.AuthorizationMiddleware=void 0;const c=r(7064),a=r(2991),u=r(4065);let s=function(e){var t,r;function o(){return e.apply(this,arguments)||this}return r=e,(t=o).prototype=Object.create(r.prototype),t.prototype.constructor=t,n(t,r),o.prototype.handler=function(e,t){return i(this,void 0,void 0,(function*(){if(yield u.resolve(u.AuthProvider).authoriseRequest(e,t),!u.Auth.check())throw new c.UnauthorisedException}))},o}(u.Middleware);s=o([a.injectable()],s),t.AuthorizationMiddleware=s},9510:function(e,t,r){"use strict";function n(e,t){return(n=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var o=this&&this.__decorate||function(e,t,r,n){var o,i=arguments.length,c=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)c=Reflect.decorate(e,t,r,n);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(c=(i<3?o(c):i>3?o(t,r,c):o(t,r))||c);return i>3&&c&&Object.defineProperty(t,r,c),c},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0}),t.User=void 0;const c=r(1576),a=r(516),u=r(2991),s=r(7548),l=r(4065);let f=function(e){var t,r;function o(){return e.apply(this,arguments)||this}return r=e,(t=o).prototype=Object.create(r.prototype),t.prototype.constructor=t,n(t,r),o}(l.ModelEntity);o([l.Id,i("design:type",s.ObjectId)],f.prototype,"_id",void 0),o([a.IsEmail(),a.IsNotEmpty(),i("design:type",String)],f.prototype,"email",void 0),o([c.Exclude({toPlainOnly:!0}),i("design:type",String)],f.prototype,"password",void 0),o([c.Type((()=>Number)),i("design:type",Number)],f.prototype,"something",void 0),f=o([u.injectable()],f),t.User=f},7632:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.app=void 0,t.app={hostname:process.env.APP_HOST,port:process.env.PORT,appKey:process.env.APP_KEY}},5217:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.auth=void 0,t.auth={primaryLoginCredential:"email",jwtSigningOptions:{expiresIn:"24h",algorithm:"HS256"},jwtVerifyOptions:{ignoreExpiration:!1,algorithms:["HS256"]}}},2280:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.database=void 0,t.database={mongo:{connectionUrl:process.env.MONGODB_CONNECTION_URL},redis:{host:process.env.REDIS_HOST,port:Number(process.env.REDIS_PORT)}}},3077:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.http=void 0,t.http={responseSerialization:{enableCircularCheck:!0,excludePrefixes:["_"],strategy:"exposeAll"}}},8558:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Config=void 0;const n=r(3077),o=r(7632),i=r(5217),c=r(2280),a=r(5333),u=r(833);t.Config={app:o.app,database:c.database,providers:a.providers,serverProviders:a.serverProviders,storage:u.storage,auth:i.auth,http:n.http}},5333:function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.serverProviders=t.providers=void 0;const o=n(r(1495)),i=r(4065);t.providers=[i.EncryptionServiceProvider,i.LogServiceProvider,i.CacheServiceProvider,i.StorageServiceProvider,i.ModelServiceProvider,i.AuthServiceProvider,i.ControllerServiceProvider,i.ServerServiceProvider],t.serverProviders=[[o.default,{}]]},833:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.storage=void 0;const n=r(4065);t.storage={defaultProvider:n.SpacesProvider,spaces:{bucket:process.env.SPACES_BUCKET,url:process.env.SPACES_URL,endpoint:process.env.SPACES_ENDPOINT,credentials:{accessKeyId:process.env.SPACES_KEY,secretAccessKey:process.env.SPACES_SECRET}}}},8696:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&n(t,e,r);return o(t,e),t},c=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function c(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(c,a)}u((n=n.apply(e,t||[])).next())}))},a=this&&this.__asyncValues||function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,r=e[Symbol.asyncIterator];return r?r.call(e):(e="function"==typeof __values?__values(e):e[Symbol.iterator](),t={},n("next"),n("throw"),n("return"),t[Symbol.asyncIterator]=function(){return this},t);function n(r){t[r]=e[r]&&function(t){return new Promise((function(n,o){!function(e,t,r,n){Promise.resolve(n).then((function(t){e({value:t,done:r})}),t)}(n,o,(t=e[r](t)).done,t.value)}))}}};Object.defineProperty(t,"__esModule",{value:!0}),t.App=void 0;const u=r(8558),s=r(4065),l=i(r(7347));let f=function(){function e(){}var t=e.prototype;return t.registerProviders=function(){for(const e of u.Config.providers)l.default.bind(e).to(e)},t.registerProviderBindings=function(){return c(this,void 0,void 0,(function*(){for(const e of u.Config.providers)yield l.default.get(e).registerBindings(),l.default.isBound(l.LOGGER_IDENTIFIER)&&s.Log.info("Bound and registered "+e.name+" to the container.")}))},t.boot=function(){return c(this,void 0,void 0,(function*(){}))},t.bootProviders=function(){var e,t;return c(this,void 0,void 0,(function*(){try{for(var r,n=a(u.Config.providers);!(r=yield n.next()).done;){const e=r.value;yield l.default.get(e).boot()}}catch(t){e={error:t}}finally{try{r&&!r.done&&(t=n.return)&&(yield t.call(n))}finally{if(e)throw e.error}}}))},t.up=function(){return c(this,void 0,void 0,(function*(){}))},t.down=function(){l.default.get(s.Server).cleanUpMetadata(),l.default.unbindAll()},e}();t.App=f},9377:function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function c(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(c,a)}u((n=n.apply(e,t||[])).next())}))},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.whenBootstrapped=void 0,r(334).config();const i=o(r(6786));global.fetch=i.default,t.whenBootstrapped=()=>n(void 0,void 0,void 0,(function*(){}))},7347:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.LOGGER_IDENTIFIER=t.CONTAINER_IDENTIFIER=t.HTTP_REQUEST_IDENTIFIER=t.HTTP_CONTEXT_IDENTIFIER=t.AUTHED_USER_IDENTIFIER=void 0;const n=new(r(2991).Container);t.AUTHED_USER_IDENTIFIER=Symbol("AuthorisedUser"),t.HTTP_CONTEXT_IDENTIFIER=Symbol("HttpContext"),t.HTTP_REQUEST_IDENTIFIER=Symbol("HttpRequest"),t.CONTAINER_IDENTIFIER=Symbol("Container"),t.LOGGER_IDENTIFIER=Symbol("Logger"),t.default=n},4857:(e,t)=>{"use strict";var r,n;Object.defineProperty(t,"__esModule",{value:!0}),t.CONTROLLER_METHOD_PARAMS=t.METADATA=t.DESIGN_META=void 0,(n=t.DESIGN_META||(t.DESIGN_META={})).DESIGN_PARAM_TYPES="design:paramtypes",n.DESIGN_TYPE="design:type",n.DESIGN_PROPERTIES="design:properties",n.DESIGN_RETURN_TYPE="design:returntype",function(e){e.CONTROLLER="controller",e.CONTROLLER_METHODS="controller-methods",e.HTTP_CONTEXT="http-context",e.MIDDLEWARE="middleware",e.REQUEST_METHOD_DTO="request-method-dto",e.REQUEST_METHOD_FASTIFY_REQUEST="request-method-fastify-request",e.REQUEST_METHOD_ROUTE_PARAMETER="request-method-route-parameter",e.REQUEST_METHOD_QUERY_PARAMETER="request-method-query-parameter",e.REQUEST_METHOD_BODY="request-method-body",e.REQUEST_METHOD_HEADERS="request-method-headers",e.MODEL="MODEL"}(r=t.METADATA||(t.METADATA={})),t.CONTROLLER_METHOD_PARAMS=[r.REQUEST_METHOD_DTO,r.REQUEST_METHOD_FASTIFY_REQUEST,r.REQUEST_METHOD_ROUTE_PARAMETER,r.REQUEST_METHOD_QUERY_PARAMETER,r.REQUEST_METHOD_BODY,r.REQUEST_METHOD_HEADERS]},9300:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.controller=void 0;const n=r(2991),o=r(4857);t.controller=function(e=""){return function(t){const r={path:e,target:t};n.decorate(n.injectable(),t),Reflect.defineMetadata(o.METADATA.CONTROLLER,r,t);const i=[r,...Reflect.getMetadata(o.METADATA.CONTROLLER,Reflect)||[]];Reflect.defineMetadata(o.METADATA.CONTROLLER,i,Reflect)}}},9974:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DecoratorHelpers=void 0;const n=r(4857);let o=function(){function e(){}return e.paramTypes=function(e,t){return Reflect.getMetadata(n.DESIGN_META.DESIGN_PARAM_TYPES,e,t)},e.propertyType=function(e,t){return Reflect.getMetadata(n.DESIGN_META.DESIGN_TYPE,e,t)},e.properties=function(e,t){return Reflect.getMetadata(n.DESIGN_META.DESIGN_PROPERTIES,e,t)},e.returnType=function(e){return Reflect.getMetadata(n.DESIGN_META.DESIGN_RETURN_TYPE,e)},e.getParameterNames=function(e){let t=e.toString();t=t.replace(/\/\*[\s\S]*?\*\//g,"").replace(/\/\/(.)*/g,"").replace(/{[\s\S]*}/,"").replace(/=>/g,"").trim();const r=t.indexOf("(")+1,n=t.length-1,o=t.substring(r,n).split(", "),i=[];return o.forEach((e=>{(e=e.replace(/=[\s\S]*/g,"").trim()).length>0&&i.push(e)})),i},e}();t.DecoratorHelpers=o},4950:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.middleware=void 0;const n=r(1423);t.middleware=function(e){return function(t,r,o){const i=[],c=n.Middleware.getMetadata(t);(null==c?void 0:c.middlewares)&&i.push(...c.middlewares),i.push(e);let a=null==o?void 0:o.value;a||(a=t),n.Middleware.setMetadata(a,i)}}},5531:function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Id=t.Ids=t.ref=t.indexes=t.index=t.ignore=t.nested=void 0;const o=r(1576),i=r(7548),c=n(r(6329));function a(e,t,r){const n=Reflect.getMetadata(e,r)||[];Reflect.defineMetadata(e,n.concat(t),r)}function u(e,t){if(e===i.ObjectId||e===String||e===Number||e===Boolean)throw new Error(`property '${t}' cannot have nested type '${e}'`)}t.nested=function(e){return function(t,r){const n=Reflect.getMetadata("design:type",t,r);u(n,r),o.Transform((t=>t.value?n===Array?t.value.map((t=>o.plainToClass(e,t))):o.plainToClass(e,t.value):null),{toClassOnly:!0})(t,r),o.Transform((e=>e.value?n===Array?e.value.map((e=>o.classToPlain(e))):o.classToPlain(e.value):null),{toPlainOnly:!0})(t,r),a("mongo:nested",[{name:r,typeFunction:e,array:n===Array}],t)}},t.ignore=function(e,t){const r=Reflect.getMetadata("mongo:ignore",e)||{};r[t]=!0,Reflect.defineMetadata("mongo:ignore",r,e)},t.index=function(e=1,t={}){return function(r,n){if(!n)throw new Error("@index decorator can only be applied to class properties");a("mongo:indexes",[Object.assign(Object.assign({name:n},t),{key:{[n]:e}})],r)}},t.indexes=function(e){return function(t){a("mongo:indexes",e,t.prototype)}},t.ref=function(e){return function(t,r){const n=Reflect.getMetadata("design:type",t,r);u(n,r);const a=n===Array,s=c.default(c.default(r,1)+(a?"Ids":"Id"),a?2:1);Reflect.defineMetadata("design:type",a?Array:i.ObjectId,t,s),function(e,t,r){const n=Reflect.getMetadata("mongo:refs",r)||{};n[e]=t,Reflect.defineMetadata("mongo:refs",n,r)}(r,{_id:s,array:a,modelName:e.name},t),o.Transform((t=>t.value?n===Array?t.value.map((t=>o.plainToClass(e,t))):o.plainToClass(e,t.value):null),{toClassOnly:!0})(t,r),o.Transform((e=>e.value?n===Array?e.value.map((e=>o.classToPlain(e))):o.classToPlain(e.value):null),{toPlainOnly:!0})(t,r)}},t.Ids=function(e,t){u(e,t),o.Transform((e=>e.value?e.value.map((e=>new i.ObjectId(e))):null),{toClassOnly:!0})(e,t),o.Transform((e=>e.value?e.value.map((e=>e.toString())):null),{toPlainOnly:!0})(e,t)},t.Id=function(e,t){o.Transform((({value:e})=>new i.ObjectId(e)),{toClassOnly:!0})(e,t),o.Transform((({value:e})=>e.toString()),{toPlainOnly:!0})(e,t)}},5234:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.httpMethod=t.delete_=t.remove=t.destroy=t.head=t.patch=t.put=t.post=t.get=t.all=void 0;const n=r(4857),o=r(9974);function i(e,t){return function(r,i,c){const a=r[i],u=o.DecoratorHelpers.getParameterNames(a),s=o.DecoratorHelpers.paramTypes(r,i),l=u.map(((e,t)=>{var r;return{name:e,type:null!==(r=s[t])&&void 0!==r?r:null}})),f={key:i,method:e,path:t,target:r,parameters:l},d=Reflect.getMetadata(n.METADATA.CONTROLLER_METHODS,r.constructor)||[];Reflect.hasMetadata(n.METADATA.CONTROLLER_METHODS,r.constructor)||Reflect.defineMetadata(n.METADATA.CONTROLLER_METHODS,d,r.constructor),d.push(f),Reflect.defineMetadata(n.METADATA.CONTROLLER_METHODS,d,r.constructor)}}t.all=function(e){return i("all",e)},t.get=function(e){return i("get",e)},t.post=function(e){return i("post",e)},t.put=function(e){return i("put",e)},t.patch=function(e){return i("patch",e)},t.head=function(e){return i("head",e)},t.destroy=function(e){return i("delete",e)},t.remove=function(e){return i("delete",e)},t.delete_=function(e){return i("delete",e)},t.httpMethod=i},1245:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.headers=t.body=t.query=t.param=t.dto=void 0;const n=r(4065);t.dto=function(e){return function(t,r,o){n.DataTransferObjectParam.handleParameter({target:t,propertyKey:r,parameterIndex:o},e)}},t.param=function(e,t,r){n.RouteParameterParam.handleParameter({target:e,propertyKey:t,parameterIndex:r})},t.query=function(e,t,r){n.RouteQueryParam.handleParameter({target:e,propertyKey:t,parameterIndex:r})},t.body=function(e,t,r){n.RequestBodyParam.handleParameter({target:e,propertyKey:t,parameterIndex:r})},t.headers=function(e,t,r){n.RequestHeadersParam.handleParameter({target:e,propertyKey:t,parameterIndex:r})}},9893:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(9300),t),o(r(9974),t),o(r(4950),t),o(r(5531),t),o(r(5234),t),o(r(1245),t)},5093:(e,t,r)=>{"use strict";function n(e,t){return(n=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}Object.defineProperty(t,"__esModule",{value:!0}),t.InvalidRefSpecified=void 0;let o=function(e){var t,r;function o(t,r){return e.call(this,"Ref "+r+" is not defined on model(entity) "+t)||this}return r=e,(t=o).prototype=Object.create(r.prototype),t.prototype.constructor=t,n(t,r),o}(r(6170).Exception);t.InvalidRefSpecified=o},4888:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(5093),t)},2237:function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.response=t.request=t.app=t.resolve=void 0;const o=r(4065),i=n(r(7347));t.resolve=e=>i.default.get(e),t.app=t.resolve,t.request=()=>o.HttpContext.request(),t.response=()=>o.HttpContext.response()},9214:function(e,t,r){"use strict";var n=this&&this.__decorate||function(e,t,r,n){var o,i=arguments.length,c=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)c=Reflect.decorate(e,t,r,n);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(c=(i<3?o(c):i>3?o(t,r,c):o(t,r))||c);return i>3&&c&&Object.defineProperty(t,r,c),c},o=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},i=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function c(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(c,a)}u((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.Auth=void 0;const c=r(2991),a=r(4065),u=r(3589),s=r(817);let l=function(){function e(){}return e.attempt=function(e){return i(this,void 0,void 0,(function*(){const t=a.resolve(s.AuthProvider),r=yield t.verifyCredentials(e);return!!r&&(this.loginAs(r),!0)}))},e.loginAs=function(e){a.resolve(s.AuthProvider).authoriseAs(e)},e.canRegisterAs=function(e){return i(this,void 0,void 0,(function*(){return null===(yield a.resolve(s.AuthProvider).userFromCredentials(e))}))},e.check=function(){return!!this.user()},e.user=function(){return u.HttpContext.get().user},e}();l=n([c.injectable(),o("design:paramtypes",[])],l),t.Auth=l},817:function(e,t,r){"use strict";var n=this&&this.__decorate||function(e,t,r,n){var o,i=arguments.length,c=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)c=Reflect.decorate(e,t,r,n);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(c=(i<3?o(c):i>3?o(t,r,c):o(t,r))||c);return i>3&&c&&Object.defineProperty(t,r,c),c},o=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function c(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(c,a)}u((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.AuthProvider=void 0;const i=r(9510),c=r(8558),a=r(2991),u=r(4065),s=r(5820),l=r(9214);let f=function(){function e(){}var t=e.prototype;return t.authoriseRequest=function(e,t){return o(this,void 0,void 0,(function*(){if(!u.resolve(u.JwtAuthProvider).getTokenFromHeader(e))return null;const t=u.resolve(u.JwtAuthProvider).verifyToken(e);if(!t)return null;const r=(null==t?void 0:t.id)||null;if(!r)return null;const n=yield i.User.find(r);return this.authoriseAs(n),l.Auth.user()}))},t.userFromCredentials=function(e){return o(this,void 0,void 0,(function*(){const t=c.Config.auth.primaryLoginCredential,r=e[t],n={};n[t]=r.toLowerCase();return(yield i.User.where(n).first())||null}))},t.verifyCredentials=function(e){return o(this,void 0,void 0,(function*(){const t=yield this.userFromCredentials(e);return t&&s.Hash.check(e.password,t.password)?t:null}))},t.authoriseAs=function(e){u.HttpContext.get().setUser(e)},t.jwtProvider=function(){return u.resolve(u.JwtAuthProvider)},e}();f=n([a.injectable()],f),t.AuthProvider=f},8406:function(e,t,r){"use strict";function n(e,t){return(n=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var o=this&&this.__decorate||function(e,t,r,n){var o,i=arguments.length,c=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)c=Reflect.decorate(e,t,r,n);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(c=(i<3?o(c):i>3?o(t,r,c):o(t,r))||c);return i>3&&c&&Object.defineProperty(t,r,c),c},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},c=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.AuthServiceProvider=void 0;const a=r(2991),u=c(r(7347)),s=r(8184),l=r(817),f=r(4114);let d=function(e){var t,r;function o(){return e.call(this)||this}r=e,(t=o).prototype=Object.create(r.prototype),t.prototype.constructor=t,n(t,r);var i=o.prototype;return i.registerBindings=function(){u.default.bind(f.JwtAuthProvider).to(f.JwtAuthProvider),u.default.bind(l.AuthProvider).to(l.AuthProvider)},i.boot=function(){},o}(s.ServiceProvider);d=o([a.injectable(),i("design:paramtypes",[])],d),t.AuthServiceProvider=d},582:function(e,t,r){"use strict";function n(e,t){return(n=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var o=this&&this.__decorate||function(e,t,r,n){var o,i=arguments.length,c=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)c=Reflect.decorate(e,t,r,n);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(c=(i<3?o(c):i>3?o(t,r,c):o(t,r))||c);return i>3&&c&&Object.defineProperty(t,r,c),c},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0}),t.AuthorisedUser=void 0;const c=r(1576),a=r(2991),u=r(9510),s=r(8558),l=r(2237),f=r(817);let d=function(e){var t,r;function o(t){var r;return r=e.call(this)||this,Object.assign(function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(r),t),r}r=e,(t=o).prototype=Object.create(r.prototype),t.prototype.constructor=t,n(t,r);var i=o.prototype;return i.generateToken=function(){return l.resolve(f.AuthProvider).jwtProvider().generateToken(this._id)},i.toJSON=function(){return c.classToPlain(this,s.Config.http.responseSerialization)},o}(u.User);d=o([a.injectable(),i("design:paramtypes",[u.User])],d),t.AuthorisedUser=d},4114:function(e,t,r){"use strict";var n=this&&this.__decorate||function(e,t,r,n){var o,i=arguments.length,c=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)c=Reflect.decorate(e,t,r,n);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(c=(i<3?o(c):i>3?o(t,r,c):o(t,r))||c);return i>3&&c&&Object.defineProperty(t,r,c),c};Object.defineProperty(t,"__esModule",{value:!0}),t.JwtAuthProvider=void 0;const o=r(2991),i=r(8558),c=r(9722);let a=function(){function e(){}var t=e.prototype;return t.getTokenFromHeader=function(e){const t=e.headers.authorization;if(!t)return null;const r=t.split(" ");if(2!==r.length)return null;const n=r[0],o=r[1];return o&&n&&n&&o&&"Bearer"===n?o:null},t.generateToken=function(e){return c.sign({id:e},i.Config.app.appKey,i.Config.auth.jwtSigningOptions)},t.verifyToken=function(e,t){return t||(t=this.getTokenFromHeader(e)),t?c.verify(t,i.Config.app.appKey,i.Config.auth.jwtVerifyOptions):null},e}();a=n([o.injectable()],a),t.JwtAuthProvider=a},3183:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(9214),t),o(r(817),t),o(r(8406),t),o(r(582),t),o(r(4114),t)},5860:function(e,t,r){"use strict";var n=this&&this.__decorate||function(e,t,r,n){var o,i=arguments.length,c=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)c=Reflect.decorate(e,t,r,n);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(c=(i<3?o(c):i>3?o(t,r,c):o(t,r))||c);return i>3&&c&&Object.defineProperty(t,r,c),c},o=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function c(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(c,a)}u((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.Cache=void 0;const i=r(2991),c=r(3537);let a=function(){function e(){}var t=e.prototype;return t.get=function(e,t=null){return o(this,void 0,void 0,(function*(){const r=yield c.get(e);return null!=r?r:t}))},t.put=function(e,t,r){return o(this,void 0,void 0,(function*(){yield c.set(e,t,r)}))},t.remove=function(e){return o(this,void 0,void 0,(function*(){yield c.del([e])}))},t.has=function(e){return o(this,void 0,void 0,(function*(){return!!(yield this.get(e,void 0))}))},e}();a=n([i.injectable()],a),t.Cache=a},7770:function(e,t,r){"use strict";function n(e,t){return(n=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var o=this&&this.__decorate||function(e,t,r,n){var o,i=arguments.length,c=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)c=Reflect.decorate(e,t,r,n);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(c=(i<3?o(c):i>3?o(t,r,c):o(t,r))||c);return i>3&&c&&Object.defineProperty(t,r,c),c},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.CacheServiceProvider=void 0;const c=r(8184),a=r(3537),u=r(8558),s=r(2991),l=i(r(7347)),f=r(5860);let d=function(e){var t,r;function o(){return e.apply(this,arguments)||this}r=e,(t=o).prototype=Object.create(r.prototype),t.prototype.constructor=t,n(t,r);var i=o.prototype;return i.registerBindings=function(){a.init({name:"cache:",redisOptions:{host:u.Config.database.redis.host,port:u.Config.database.redis.port}}),l.default.bind(f.Cache).to(f.Cache)},i.boot=function(){},o}(c.ServiceProvider);d=o([s.injectable()],d),t.CacheServiceProvider=d},8375:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(5860),t),o(r(7770),t)},2054:function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Encryption=void 0;const o=r(4065),i=n(r(5337));let c=function(){function e(){}return e.encrypt=function(e){return o.resolve(i.default).encrypt(e)},e.decrypt=function(e){return o.resolve(i.default).decrypt(e)},e.random=function(e){return i.default.generateRandomString(e)},e}();t.Encryption=c},9798:function(e,t,r){"use strict";function n(e,t){return(n=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var o=this&&this.__decorate||function(e,t,r,n){var o,i=arguments.length,c=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)c=Reflect.decorate(e,t,r,n);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(c=(i<3?o(c):i>3?o(t,r,c):o(t,r))||c);return i>3&&c&&Object.defineProperty(t,r,c),c},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.EncryptionServiceProvider=void 0;const c=r(8558),a=r(2991),u=i(r(5337)),s=r(4065);let l=function(e){var t,r;function o(){return e.apply(this,arguments)||this}r=e,(t=o).prototype=Object.create(r.prototype),t.prototype.constructor=t,n(t,r);var i=o.prototype;return i.registerBindings=function(){const e=new u.default(c.Config.app.appKey);s.Container.bind(u.default).toConstantValue(e)},i.boot=function(){},o}(s.ServiceProvider);l=o([a.injectable()],l),t.EncryptionServiceProvider=l},5820:function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Hash=void 0;const o=n(r(6552));let i=function(){function e(){}return e.make=function(e,t=10){return o.default.hash(e,10)},e.check=function(e,t){return o.default.compareSync(e,t)},e}();t.Hash=i},7598:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(2054),t),o(r(9798),t),o(r(5820),t)},3589:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.HttpContext=void 0;const n=r(4065);let o=function(){function e(e,t){this.request=new n.HttpRequest(e),this.response=new n.HttpResponse(t)}var t=e.prototype;return t.bind=function(e){this.container=n.Container.createChild(),Reflect.defineMetadata(n.METADATA.HTTP_CONTEXT,this,this.request.fastifyRequest),n.HttpContextStore.getInstance().bind(this.request.fastifyRequest,e)},e.get=function(){return n.HttpContextStore.getInstance().context()},e.request=function(){return this.get().request},e.response=function(){return this.get().response},t.setUser=function(e){const t=new n.AuthorisedUser(e);this.container.bind(n.AuthorisedUser).toConstantValue(t),this.user=t},e}();t.HttpContext=o},5174:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.HttpContextStore=void 0;const n=r(4065),o=r(7303);let i=null,c=function(){function e(){this._store=new o.AsyncLocalStorage,i=this}e.getInstance=function(){return i||new e};var t=e.prototype;return t.context=function(){return this._store.getStore()},t.bind=function(e,t){this._store.run(Reflect.getMetadata(n.METADATA.HTTP_CONTEXT,e),t)},e}();t.HttpContextStore=c},1325:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&n(t,e,r);return o(t,e),t},c=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function c(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(c,a)}u((n=n.apply(e,t||[])).next())}))},a=this&&this.__asyncValues||function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,r=e[Symbol.asyncIterator];return r?r.call(e):(e="function"==typeof __values?__values(e):e[Symbol.iterator](),t={},n("next"),n("throw"),n("return"),t[Symbol.asyncIterator]=function(){return this},t);function n(r){t[r]=e[r]&&function(t){return new Promise((function(n,o){!function(e,t,r,n){Promise.resolve(n).then((function(t){e({value:t,done:r})}),t)}(n,o,(t=e[r](t)).done,t.value)}))}}},u=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.FileUpload=void 0;const s=r(6170),l=i(r(5747)),f=r(8823),d=u(r(5622)),p=r(4065),h=r(2413),y=i(r(1669)).promisify(h.pipeline);let v=function(){function e(e,t){this.request=e,this.field=t}return e.prototype.store=function(e){var t,r;return c(this,void 0,void 0,(function*(){let n=null;try{for(var o,i=a(this.request.fastifyRequest.files());!(o=yield i.next()).done;){let e=o.value;if(e.fieldname===this.field){n=e;break}}}catch(e){t={error:e}}finally{try{o&&!o.done&&(r=i.return)&&(yield r.call(i))}finally{if(t)throw t.error}}if(!n)throw new s.Exception("File not found on request.",f.StatusCodes.BAD_REQUEST);const c=p.Encryption.random()+"."+n.filename.split(".").pop(),u=d.default.join(__dirname,"..","storage","temp",c);yield y(n.file,l.createWriteStream(u)),n.filepath=u;try{const t=yield p.Storage.put(e,n);return l.existsSync(u)&&l.rmSync(u),t}catch(e){throw p.Log.error(e),new s.Exception("Something went wrong uploading the file",f.StatusCodes.INTERNAL_SERVER_ERROR)}}))},e}();t.FileUpload=v},2324:(e,t,r)=>{"use strict";function n(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}Object.defineProperty(t,"__esModule",{value:!0}),t.HttpRequest=void 0;const o=r(4065);let i=function(){function e(e){this._request=e}var t,r;return e.prototype.file=function(e){return new o.FileUpload(this,e)},t=e,(r=[{key:"fastifyRequest",get:function(){return this._request}}])&&n(t.prototype,r),e}();t.HttpRequest=i},8847:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(1325),t),o(r(2324),t)},3549:(e,t,r)=>{"use strict";function n(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}Object.defineProperty(t,"__esModule",{value:!0}),t.HttpResponse=void 0;const o=r(4567),i=r(8823);let c=function(){function e(e){this._response=e}var t,r,c=e.prototype;return c.header=function(e,t){return this.fastifyReply.header(e,t),this},c.setResponse=function(e,t){return this._data=e,this._code=t,this},c.setCode=function(e){return this._code=e,this},c.send=function(){return this.fastifyReply.status(this.code).send(this.data)},c.redirect=function(e){return this.setResponse(null,i.StatusCodes.TEMPORARY_REDIRECT).header("Location",e)},c.notFound=function(e){return this.setResponse(e,i.StatusCodes.NOT_FOUND)},c.badRequest=function(e){return this.setResponse(e,i.StatusCodes.BAD_REQUEST)},c.validationFailure=function(e){throw new o.ValidationException(e)},c.json=function(e,t){return this.setResponse(e||{},t||i.StatusCodes.OK)},t=e,(r=[{key:"fastifyReply",get:function(){return this._response}},{key:"code",get:function(){var e;return null!==(e=this._code)&&void 0!==e?e:200},set:function(e){this._code=e}},{key:"data",get:function(){var e;return null!==(e=this._data)&&void 0!==e?e:{}},set:function(e){this._data=e}}])&&n(t.prototype,r),e}();t.HttpResponse=c},4060:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(3549),t)},4628:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(3589),t),o(r(5174),t),o(r(8847),t),o(r(4060),t)},3714:function(e,t,r){"use strict";var n=this&&this.__decorate||function(e,t,r,n){var o,i=arguments.length,c=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)c=Reflect.decorate(e,t,r,n);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(c=(i<3?o(c):i>3?o(t,r,c):o(t,r))||c);return i>3&&c&&Object.defineProperty(t,r,c),c};Object.defineProperty(t,"__esModule",{value:!0}),t.Controller=void 0;const o=r(2991),i=r(4857);let c=function(){function e(){}var t=e.prototype;return t.getMetadata=function(){return Reflect.getMetadata(i.METADATA.CONTROLLER,this.constructor)},t.getMethodMetadata=function(){return Reflect.getMetadata(i.METADATA.CONTROLLER_METHODS,this.constructor)},e}();c=n([o.injectable()],c),t.Controller=c},2706:function(e,t,r){"use strict";function n(e,t){return(n=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var o=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),c=this&&this.__decorate||function(e,t,r,n){var o,i=arguments.length,c=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)c=Reflect.decorate(e,t,r,n);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(c=(i<3?o(c):i>3?o(t,r,c):o(t,r))||c);return i>3&&c&&Object.defineProperty(t,r,c),c},a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&o(t,e,r);return i(t,e),t},u=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ControllerServiceProvider=void 0;const s=r(6878),l=r(2991),f=u(r(5622)),d=r(4065),p=a(r(7347)),h=r(3714);let y=function(e){var t,o;function i(){return e.apply(this,arguments)||this}o=e,(t=i).prototype=Object.create(o.prototype),t.prototype.constructor=t,n(t,o);var c=i.prototype;return c.registerBindings=function(){},c.boot=function(){this.bindContextToContainer(p.default),s.glob.sync(f.default.join("src","App","Http","Controllers","**","*.ts"),{follow:!0}).map((e=>{const t=e.replace("src/App/Http/Controllers/","").replace(".ts","");Promise.resolve().then((()=>a(r(1962)(`./${t}`)))).then((e=>this.loadController(e,t))).catch((t=>{d.Log.warn("["+this.constructor.name+"] Failed to load controller: "+e),d.Log.error(t)}))}))},c.bindContextToContainer=function(e,t){t||(t={}),e.bind(p.HTTP_CONTEXT_IDENTIFIER).toConstantValue(t),e.bind(p.AUTHED_USER_IDENTIFIER).toConstantValue(t.user),e.bind(p.HTTP_REQUEST_IDENTIFIER).toConstantValue(t.request),e.bind(p.CONTAINER_IDENTIFIER).toConstantValue(e)},c.loadController=function(e,t){const r=Object.keys(e)[0]||null;if(!r)throw new Error("There was an error loading controller: "+t);const n=e[r],o=n.name;if(p.default.isBoundNamed(h.Controller,o))throw new Error(`Two controllers cannot have the same name: ${o}`);p.default.bind(h.Controller).to(n).whenTargetNamed(o),d.Log.info("Controller Loaded: "+t)},c.allControllers=function(){if(p.default.isBound(h.Controller))return p.default.getAll(h.Controller)||[];d.Log.warn("No controllers have been bound to the container...")},i}(d.ServiceProvider);y=c([l.injectable()],y),t.ControllerServiceProvider=y},3639:function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function c(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(c,a)}u((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.DataTransferObject=void 0;const o=r(4567),i=r(516),c=r(4065);let a=function(){function e(){}var t=e.prototype;return t.validate=function(){return n(this,void 0,void 0,(function*(){try{yield i.validateOrReject(this,{forbidUnknownValues:!0,whitelist:!0,enableDebugMessages:!0})}catch(e){c.Log.warn(e.toString(!1),!0),Array.isArray(e)&&(this._validationErrors=e)}}))},t.throwIfFailed=function(){if(this.failed())throw new o.ValidationException(this._validationErrors)},t.failed=function(){return!!this._validationErrors},t.errors=function(){return this._validationErrors?this._validationErrors:null},e}();t.DataTransferObject=a},8452:function(e,t){"use strict";var r=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function c(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(c,a)}u((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.ControllerRequestParamDecorator=void 0;let n=function(){function e(e){this.expectedParamType=e}e.getMethodMetadata=function(e,t){return Reflect.getMetadata(t,e)},e.hasInjectableParams=function(e,t,r){return!!this.getMethodMetadata(t[r],e)};var t=e.prototype;return t.bind=function(e,t){return r(this,void 0,void 0,(function*(){}))},t.canBind=function(e,t,r){return this.expectedParamType.prototype===t.prototype},e}();t.ControllerRequestParamDecorator=n},8249:function(e,t,r){"use strict";function n(e,t){return(n=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var o=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function c(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(c,a)}u((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.DataTransferObjectParam=void 0;const i=r(1576),c=r(4857),a=r(9974),u=r(3639);let s=function(e){var t,r;function s(t,r=!0){var n;return(n=e.call(this,t)||this).validateOnRequest=!0,n.dtoParameter=t,n.validateOnRequest=r,n}return r=e,(t=s).prototype=Object.create(r.prototype),t.prototype.constructor=t,n(t,r),s.handleParameter=function(e,t=!0){const r=a.DecoratorHelpers.paramTypes(e.target,e.propertyKey)[e.parameterIndex];if(r.prototype instanceof u.DataTransferObject){const n=new s(r,t);this.setMetadata(e,n)}},s.setMetadata=function(e,t){const r=e.target[e.propertyKey];Reflect.defineMetadata(c.METADATA.REQUEST_METHOD_DTO,t,r)},s.getMetadata=function(e){return Reflect.getMetadata(c.METADATA.REQUEST_METHOD_DTO,e)},s.prototype.bind=function(e,t){return o(this,void 0,void 0,(function*(){const t=i.plainToClass(this.dtoParameter,e.body);return yield t.validate(),this.validateOnRequest&&t.throwIfFailed(),t}))},s.canInject=function(e,t){return!!this.getMetadata(e[t])},s}(r(8452).ControllerRequestParamDecorator);t.DataTransferObjectParam=s},3830:function(e,t,r){"use strict";function n(e,t){return(n=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var o=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function c(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(c,a)}u((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.RequestBodyParam=void 0;const i=r(4857);let c=function(e){var t,r;function c(t){var r;return(r=e.call(this,null)||this).parameterIndex=t,r}r=e,(t=c).prototype=Object.create(r.prototype),t.prototype.constructor=t,n(t,r),c.handleParameter=function(e,t=!0){this.setMetadata(e,new c(e.parameterIndex))},c.setMetadata=function(e,t){const r=e.target[e.propertyKey];Reflect.defineMetadata(i.METADATA.REQUEST_METHOD_BODY,t,r)},c.getMetadata=function(e){return Reflect.getMetadata(i.METADATA.REQUEST_METHOD_BODY,e)};var a=c.prototype;return a.canBind=function(e,t,r){return r===this.parameterIndex},a.bind=function(e,t){return o(this,void 0,void 0,(function*(){return e.body}))},c}(r(8452).ControllerRequestParamDecorator);t.RequestBodyParam=c},3389:function(e,t,r){"use strict";function n(e,t){return(n=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var o=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function c(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(c,a)}u((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.RequestHeadersParam=void 0;const i=r(4857);let c=function(e){var t,r;function c(t){var r;return(r=e.call(this,null)||this).parameterIndex=t,r}r=e,(t=c).prototype=Object.create(r.prototype),t.prototype.constructor=t,n(t,r),c.handleParameter=function(e){this.setMetadata(e,new c(e.parameterIndex))},c.setMetadata=function(e,t){const r=e.target[e.propertyKey];Reflect.defineMetadata(i.METADATA.REQUEST_METHOD_HEADERS,t,r)},c.getMetadata=function(e){return Reflect.getMetadata(i.METADATA.REQUEST_METHOD_HEADERS,e)};var a=c.prototype;return a.canBind=function(e,t,r){return r===this.parameterIndex},a.bind=function(e,t){return o(this,void 0,void 0,(function*(){return e.headers}))},c}(r(8452).ControllerRequestParamDecorator);t.RequestHeadersParam=c},104:function(e,t,r){"use strict";function n(e,t){return(n=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var o=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function c(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(c,a)}u((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.RequestParam=void 0;const i=r(4857);let c=function(e){var t,r;function c(){return e.call(this,null)||this}r=e,(t=c).prototype=Object.create(r.prototype),t.prototype.constructor=t,n(t,r),c.handleParameter=function(e){const t=new c;this.setMetadata(e,t)},c.setMetadata=function(e,t){const r=e.target[e.propertyKey];Reflect.defineMetadata(i.METADATA.REQUEST_METHOD_FASTIFY_REQUEST,t,r)},c.getMetadata=function(e){return Reflect.getMetadata(i.METADATA.REQUEST_METHOD_FASTIFY_REQUEST,e)};var a=c.prototype;return a.canBind=function(e,t,r){return this instanceof c},a.bind=function(e,t){return o(this,void 0,void 0,(function*(){return e}))},c}(r(8452).ControllerRequestParamDecorator);t.RequestParam=c},898:function(e,t,r){"use strict";function n(e,t){return(n=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var o=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function c(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(c,a)}u((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.RouteParameterParam=void 0;const i=r(4857),c=r(9974);let a=function(e){var t,r;function a(t,r,n){var o;return(o=e.call(this,r)||this).parameterName=t,o.paramIndex=n,o}r=e,(t=a).prototype=Object.create(r.prototype),t.prototype.constructor=t,n(t,r),a.handleParameter=function(e){const t=c.DecoratorHelpers.paramTypes(e.target,e.propertyKey),r=new a(c.DecoratorHelpers.getParameterNames(e.target[e.propertyKey])[e.parameterIndex],t[e.parameterIndex],e.parameterIndex);this.setMetadata(e,r)},a.setMetadata=function(e,t){const r=e.target[e.propertyKey];Reflect.defineMetadata(i.METADATA.REQUEST_METHOD_ROUTE_PARAMETER,t,r)},a.getMetadata=function(e){return Reflect.getMetadata(i.METADATA.REQUEST_METHOD_ROUTE_PARAMETER,e)};var u=a.prototype;return u.canBind=function(e,t,r){return r===this.paramIndex&&this.expectedParamType===t},u.bind=function(e,t){return o(this,void 0,void 0,(function*(){const t=e.params[this.parameterName],r=this.expectedParamType(t);return null!=r?r:null}))},a}(r(8452).ControllerRequestParamDecorator);t.RouteParameterParam=a},8219:function(e,t,r){"use strict";function n(e,t){return(n=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var o=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function c(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(c,a)}u((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.RouteQueryParam=void 0;const i=r(6170),c=r(8823),a=r(4065);let u=function(e){var t,r;function u(t,r,n){var o;return(o=e.call(this,r)||this).parameterName=t,o.paramIndex=n,o}r=e,(t=u).prototype=Object.create(r.prototype),t.prototype.constructor=t,n(t,r),u.handleParameter=function(e){const t=a.DecoratorHelpers.paramTypes(e.target,e.propertyKey),r=new u(a.DecoratorHelpers.getParameterNames(e.target[e.propertyKey])[e.parameterIndex],t[e.parameterIndex],e.parameterIndex);this.setMetadata(e,r)},u.setMetadata=function(e,t){const r=e.target[e.propertyKey];Reflect.defineMetadata(a.METADATA.REQUEST_METHOD_QUERY_PARAMETER,t,r)},u.getMetadata=function(e){return Reflect.getMetadata(a.METADATA.REQUEST_METHOD_QUERY_PARAMETER,e)};var s=u.prototype;return s.canBind=function(e,t,r){return r===this.paramIndex&&this.expectedParamType===t},s.bind=function(e,t){return o(this,void 0,void 0,(function*(){const t=e.query[this.parameterName],r=this.expectedParamType(t);if(!r)throw new i.Exception(`Expected type of ${typeof r} for param ${this.parameterName} but ${typeof t} cannot be cast to ${typeof r}`,c.StatusCodes.BAD_REQUEST);return null!=r?r:null}))},u}(r(8452).ControllerRequestParamDecorator);t.RouteQueryParam=u},3643:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(8452),t),o(r(8249),t),o(r(3830),t),o(r(3389),t),o(r(104),t),o(r(898),t),o(r(8219),t)},1423:function(e,t,r){"use strict";var n=this&&this.__decorate||function(e,t,r,n){var o,i=arguments.length,c=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)c=Reflect.decorate(e,t,r,n);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(c=(i<3?o(c):i>3?o(t,r,c):o(t,r))||c);return i>3&&c&&Object.defineProperty(t,r,c),c};Object.defineProperty(t,"__esModule",{value:!0}),t.Middleware=void 0;const o=r(2991),i=r(4857);let c=function(){function e(){}return e.getMetadata=function(e){return Reflect.getMetadata(i.METADATA.MIDDLEWARE,e)},e.setMetadata=function(e,t){return Reflect.defineMetadata(i.METADATA.MIDDLEWARE,{middlewares:t},e)},e}();c=n([o.injectable()],c),t.Middleware=c},7616:function(e,t,r){"use strict";var n=this&&this.__decorate||function(e,t,r,n){var o,i=arguments.length,c=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)c=Reflect.decorate(e,t,r,n);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(c=(i<3?o(c):i>3?o(t,r,c):o(t,r))||c);return i>3&&c&&Object.defineProperty(t,r,c),c},o=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},i=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function c(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(c,a)}u((n=n.apply(e,t||[])).next())}))},c=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Route=void 0;const a=r(5695),u=r(8558),s=c(r(5661)),l=r(1576),f=c(r(8823)),d=r(2991),p=r(7548),h=r(4065),y=r(3714),v=r(1423);let _=function(){function e(e,t,r,n){this.controllerConstructor=e,this.controllerMetadata=t,this.controllerMethodMetadata=r,this.metadata=n}var t=e.prototype;return t.getFastifyRouteOptions=function(){const e=this.resolveHandlerFactory(),t=this.getRoutePath();return[t,this.getMiddlewareAdapter(t),e]},t.getMiddlewareAdapter=function(e){const t=v.Middleware.getMetadata(this.controllerConstructor),r=v.Middleware.getMetadata(this.metadata.target[this.metadata.key]),n=[...(null==t?void 0:t.middlewares)||[],...(null==r?void 0:r.middlewares)||[]];return n.forEach((t=>{h.Log.info(t.constructor.name+" was loaded for "+e)})),{preHandler:(e,t)=>i(this,void 0,void 0,(function*(){for(const r of n)try{yield r.handler(e,t)}catch(e){return a.ExceptionHandler.transform(e,t)}}))}},t.getRoutePath=function(){const e=[this.controllerMetadata.path,this.metadata.path];for(let t in e)e[t]=e[t].replace("/","");let t=e.join("/");return t.startsWith("/")||(t="/"+t),t},t.resolveHandlerFactory=function(){return(e,t)=>i(this,void 0,void 0,(function*(){try{const r=yield this.injectRouteDecorators(e,t),n=Reflect.getMetadata(h.METADATA.HTTP_CONTEXT,e),o=yield n.container.getNamed(y.Controller,this.controllerMetadata.target.name)[this.metadata.key](...r);return t.sent?void s.default.warn("Res was already sent"):this.getResponseResult(o)}catch(e){return a.ExceptionHandler.transform(e,t)}}))},t.injectRouteDecorators=function(e,t){var r;return i(this,void 0,void 0,(function*(){const n=[];if(!h.DecoratorHelpers.paramTypes(this.metadata.target,this.metadata.key))return[e,t];for(let o in this.metadata.parameters){const i=this.metadata.parameters[o];if(i.type.prototype instanceof h.ModelEntity){const t=e.params[i.name],o=null!==(r=yield i.type.query().findById(new p.ObjectId(t)))&&void 0!==r?r:null;n.push(o)}else for(const r of h.CONTROLLER_METHOD_PARAMS){const c=h.ControllerRequestParamDecorator.getMethodMetadata(this.metadata.target[this.metadata.key],r);if(c&&c.canBind(this.metadata.target[this.metadata.key],i.type,Number(o))){n.push(yield c.bind(e,t));break}}}return n}))},t.getResponseResult=function(e){const t=h.HttpContext.response();if(null==e)return t.setResponse(null,f.default.NO_CONTENT).send();if(!(e instanceof h.HttpResponse))return t.setResponse(l.classToPlain(e,u.Config.http.responseSerialization),f.default.ACCEPTED).send();const r=u.Config.http.responseSerialization;return e.data=l.serialize(e.data,r),e.send()},t.replaceCircularReferenceInResponse=function(e,t=null){if(t=t||new WeakSet,e&&"object"==typeof e){if(t.has(e))return"[Circular]";t.add(e);const r=Array.isArray(e)?[]:{};for(const n in e)r[n]=this.replaceCircularReferenceInResponse(e[n],t);return t.delete(e),r}return e},e}();_=n([d.injectable(),o("design:paramtypes",[Function,Object,Array,Object])],_),t.Route=_},5941:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(3714),t),o(r(2706),t),o(r(3639),t),o(r(3643),t),o(r(1423),t),o(r(7616),t)},7912:function(e,t,r){"use strict";function n(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var o=this&&this.__decorate||function(e,t,r,n){var o,i=arguments.length,c=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)c=Reflect.decorate(e,t,r,n);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(c=(i<3?o(c):i>3?o(t,r,c):o(t,r))||c);return i>3&&c&&Object.defineProperty(t,r,c),c},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},c=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function c(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(c,a)}u((n=n.apply(e,t||[])).next())}))},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Server=void 0;const u=r(8558),s=a(r(5661)),l=a(r(6495)),f=r(2991),d=a(r(2844)),p=r(4065),h=r(4857),y=r(3589),v=r(2706),_=r(7616);let g=function(){function e(){}var t,r,o=e.prototype;return o.build=function(){return c(this,void 0,void 0,(function*(){if(this._app)throw new Error("Server has already been built");return this._app=l.default({}),yield this._app.register(d.default),this._app.addHook("onError",((e,t,r,n)=>{s.default.error(r),n()})),this._app.addHook("preHandler",((e,t,r)=>{new y.HttpContext(e,t).bind(r)})),this.registerPlugins(),this.registerControllers(),this._app}))},o.registerControllers=function(){this._app.register(((e,t,r)=>{this.controllerProvider.allControllers().forEach((e=>{const t=e.getMetadata(),r=e.getMethodMetadata();t&&r&&r.forEach((n=>{const o=new _.Route(e.constructor,t,r,n);p.Log.info(`Route Loaded: ${e.constructor.name}(${n.method.toUpperCase()} ${o.getRoutePath()})`),this._app[n.method](...o.getFastifyRouteOptions())}))})),r()}))},o.cleanUpMetadata=function(){Reflect.defineMetadata(h.METADATA.CONTROLLER,[],Reflect)},o.registerPlugins=function(){u.Config.serverProviders.forEach((e=>{this._app.register(e[0],e[1])}))},t=e,(r=[{key:"app",get:function(){return this._app}}])&&n(t.prototype,r),e}();o([f.inject(v.ControllerServiceProvider),i("design:type",v.ControllerServiceProvider)],g.prototype,"controllerProvider",void 0),g=o([f.injectable()],g),t.Server=g},4957:function(e,t,r){"use strict";function n(e,t){return(n=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var o=this&&this.__decorate||function(e,t,r,n){var o,i=arguments.length,c=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)c=Reflect.decorate(e,t,r,n);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(c=(i<3?o(c):i>3?o(t,r,c):o(t,r))||c);return i>3&&c&&Object.defineProperty(t,r,c),c},i=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function c(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(c,a)}u((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.ServerServiceProvider=void 0;const c=r(2991),a=r(4065),u=r(7912);let s=function(e){var t,r;function o(){return e.apply(this,arguments)||this}r=e,(t=o).prototype=Object.create(r.prototype),t.prototype.constructor=t,n(t,r);var c=o.prototype;return c.registerBindings=function(){a.Container.bind(u.Server).to(u.Server).inSingletonScope()},c.boot=function(){return i(this,void 0,void 0,(function*(){}))},c.run=function(){return i(this,void 0,void 0,(function*(){this.server=a.Container.get(u.Server),this.httpServer=yield this.server.build(),yield this.httpServer.listen(3e3),a.Log.success("Server is running at http://127.0.0.1:3000")}))},o}(a.ServiceProvider);s=o([c.injectable()],s),t.ServerServiceProvider=s},1443:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(7912),t),o(r(4957),t)},6436:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(8847),t),o(r(4060),t),o(r(4628),t),o(r(3643),t),o(r(5941),t),o(r(1443),t)},5031:function(e,t,r){"use strict";var n=this&&this.__decorate||function(e,t,r,n){var o,i=arguments.length,c=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)c=Reflect.decorate(e,t,r,n);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(c=(i<3?o(c):i>3?o(t,r,c):o(t,r))||c);return i>3&&c&&Object.defineProperty(t,r,c),c};Object.defineProperty(t,"__esModule",{value:!0}),t.Log=void 0;const o=r(2991),i=r(4065);let c=function(){function e(){}return e.log=function(e,...t){global.disableConsoleLogs||i.resolve(i.LOGGER_IDENTIFIER).log("log",e,Object.assign({},t))},e.success=function(e,...t){global.disableConsoleLogs||i.resolve(i.LOGGER_IDENTIFIER).log("success",e,Object.assign({},t))},e.warn=function(e,...t){global.disableConsoleLogs||i.resolve(i.LOGGER_IDENTIFIER).warn(e,Object.assign({},t))},e.error=function(e,...t){global.disableConsoleLogs||i.resolve(i.LOGGER_IDENTIFIER).error(e,Object.assign({},t))},e.info=function(e,...t){global.disableConsoleLogs||i.resolve(i.LOGGER_IDENTIFIER).info(e,Object.assign({},t))},e}();c=n([o.injectable()],c),t.Log=c},9902:function(e,t,r){"use strict";function n(e,t){return(n=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var o=this&&this.__decorate||function(e,t,r,n){var o,i=arguments.length,c=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)c=Reflect.decorate(e,t,r,n);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(c=(i<3?o(c):i>3?o(t,r,c):o(t,r))||c);return i>3&&c&&Object.defineProperty(t,r,c),c},i=this&&this.__rest||function(e,t){var r={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(n=Object.getOwnPropertySymbols(e);o<n.length;o++)t.indexOf(n[o])<0&&Object.prototype.propertyIsEnumerable.call(e,n[o])&&(r[n[o]]=e[n[o]])}return r},c=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.LogServiceProvider=void 0;const a=c(r(2242)),u=r(2991),s=r(4065),l=r(944),f=c(r(2510)),{combine:d,timestamp:p,label:h,prettyPrint:y,printf:v,colorize:_,cli:g,ms:b}=l.format;let O=function(e){var t,r;function o(){return e.apply(this,arguments)||this}r=e,(t=o).prototype=Object.create(r.prototype),t.prototype.constructor=t,n(t,r);var c=o.prototype;return c.registerBindings=function(){const e=new f.default({dirname:"./storage/logs",filename:"%DATE%-app.log",format:d(l.format.timestamp({format:"M/D HH:mm:ss.SSS"}),l.format.ms(),v((e=>{var{level:t,message:r,label:n,ms:o,timestamp:c}=e,a=i(e,["level","message","label","ms","timestamp"]);o&&(o.replace("ms","").replace("+","").replace("s",""),o=`${o}`);let u=`[${c}][${t} ${o}] : ${r}`;if(a&&Object.keys(a).length)try{u+="\n",u+=JSON.stringify(a,null,"    ")}catch(e){}return u}))),zippedArchive:!0,maxSize:"20m",maxFiles:"14d"}),t=v((e=>{var{level:t,message:r,label:n,ms:o,timestamp:c}=e,u=i(e,["level","message","label","ms","timestamp"]);o&&(o=o.replace("ms","").replace("+","").replace("s","")>100?a.default.redBright`${o}`:a.default.greenBright`${o}`),c=a.default.gray(`[${c}]`);let s=a.default.white,l=a.default.white;switch(t){case"log":s=a.default.bgGray.whiteBright.bold;break;case"warn":s=a.default.bgYellow.whiteBright.bold;break;case"error":s=a.default.bgRed.whiteBright.bold;break;case"success":s=a.default.bgGreen.whiteBright.bold;break;case"info":s=a.default.bgBlue.whiteBright.bold}switch(t){case"log":l=a.default.gray;break;case"warn":l=a.default.yellow;break;case"error":l=a.default.red;break;case"success":l=a.default.green;break;case"info":l=a.default.blue}t=s` ${t.toUpperCase()} `;let f=`${c} ${a.default.gray`${t}`} ${r=l`${r}`} ${o}`;if(u&&Object.keys(u).length)try{f+="\n",f+=JSON.stringify(u,null,"    ")}catch(e){}return f})),r=new l.transports.Console({handleExceptions:!0,format:d(l.format.timestamp({format:"HH:mm:ss"}),b(),t)}),n=l.createLogger({levels:{debug:0,success:1,info:2,warn:3,error:4},level:"error",exitOnError:!1,handleExceptions:!1,exceptionHandlers:[r,e],transports:[r,e]});s.Container.bind(s.LOGGER_IDENTIFIER).toConstantValue(n),s.Log.info("..."),s.Log.info("..."),s.Log.success("Application is booting...")},c.boot=function(){},o}(s.ServiceProvider);O=o([u.injectable()],O),t.LogServiceProvider=O},9522:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(5031),t),o(r(9902),t)},931:function(e,t,r){"use strict";var n,o=this&&this.__decorate||function(e,t,r,n){var o,i=arguments.length,c=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)c=Reflect.decorate(e,t,r,n);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(c=(i<3?o(c):i>3?o(t,r,c):o(t,r))||c);return i>3&&c&&Object.defineProperty(t,r,c),c},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},c=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function c(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(c,a)}u((n=n.apply(e,t||[])).next())}))},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ModelEntity=void 0;const u=r(8558),s=r(1576),l=r(2991),f=a(r(6329)),d=r(4065),p=a(r(7347));let h=n=function(){function e(){this._recentMongoResponse=null,this._queryBuilder=new d.QueryBuilder(this)}var t=e.prototype;return t.queryBuilder=function(){return this._queryBuilder},t.modelInstance=function(){return this},t.repository=function(){return p.default.get(this.constructor)},t.save=function(){return c(this,void 0,void 0,(function*(){return yield this.repository().save(this.modelInstance()),this}))},t.refresh=function(){return c(this,void 0,void 0,(function*(){const e=yield this.repository().findById(this._id);Object.assign(this,e)}))},t.delete=function(){return c(this,void 0,void 0,(function*(){yield this.repository().remove(this.modelInstance())}))},e.count=function(){return c(this,void 0,void 0,(function*(){return this.where({}).count()}))},e.where=function(e){return(new this).queryBuilder().where(e)},e.with=function(...e){return(new this).queryBuilder().with(...e)},e.find=function(e){return(new this).repository().findById(e)},e.orderByDesc=function(e){return new d.QueryBuilder(new this).orderByDesc(e)},e.orderByAsc=function(e){return new d.QueryBuilder(new this).orderByAsc(e)},e.create=function(e){return c(this,void 0,void 0,(function*(){return yield this.query().insert(e),yield this.find(e._id)}))},e.query=function(){return p.default.get(this)},t.mongoResponse=function(){return this._recentMongoResponse},t.setMongoResponse=function(e){this._recentMongoResponse=e},t.collectionName=function(e=!1){return n.formatNameForCollection(this.constructor.name,e)},e.formatNameForCollection=function(e,t=!1){return String(f.default(e,t?2:1)).toLowerCase()},t.toJSON=function(){return s.classToPlain(this.modelInstance(),u.Config.http.responseSerialization)},e}();h=n=o([l.injectable(),i("design:paramtypes",[])],h),t.ModelEntity=h},1991:function(e,t,r){"use strict";function n(e,t){return(n=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var o=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),c=this&&this.__decorate||function(e,t,r,n){var o,i=arguments.length,c=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)c=Reflect.decorate(e,t,r,n);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(c=(i<3?o(c):i>3?o(t,r,c):o(t,r))||c);return i>3&&c&&Object.defineProperty(t,r,c),c},a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&o(t,e,r);return i(t,e),t},u=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function c(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(c,a)}u((n=n.apply(e,t||[])).next())}))},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ModelServiceProvider=void 0;const l=r(8558),f=r(6878),d=r(2991),p=r(7548),h=s(r(5622)),y=s(r(6329)),v=r(4065),_=s(r(7347));let g=function(e){var t,o;function i(){var t;return(t=e.apply(this,arguments)||this).models=[],t}o=e,(t=i).prototype=Object.create(o.prototype),t.prototype.constructor=t,n(t,o);var c=i.prototype;return c.registerBindings=function(){return u(this,void 0,void 0,(function*(){const e=this.getModels();for(let t of e)try{const e=yield Promise.resolve().then((()=>a(r(6569)(`./${t.location}`))));this.loadModel(e,t.name)}catch(e){v.Log.warn("["+this.constructor.name+"] Failed to load model: "+t.originalLocation),v.Log.error(e)}}))},c.boot=function(){return u(this,void 0,void 0,(function*(){yield this.setupDatabase(),this.setupEntityRepositories()}))},c.getModels=function(){return f.glob.sync(h.default.join("src","App","Models","**","*.ts"),{follow:!0}).map((e=>{const t=e.replace("src/App/Models/","").replace(".ts","");return{name:t.split("/").pop(),location:t,import:`@App/Models/${t}`,originalLocation:e}}))},c.setupDatabase=function(){return u(this,void 0,void 0,(function*(){const e=new p.MongoClient(l.Config.database.mongo.connectionUrl,{useNewUrlParser:!0,useUnifiedTopology:!0}),t=yield e.connect();_.default.bind(p.MongoClient).toConstantValue(t)}))},c.setupEntityRepositories=function(){const e=_.default.getAll(v.ModelEntity);for(let t of e){const e=new v.Repository(t.constructor,_.default.get(p.MongoClient),y.default(t.constructor.name.toLowerCase()));_.default.bind(t.constructor).toConstantValue(e)}},c.loadModel=function(e,t){const r=Object.keys(e)[0]||null;if(!r)throw new Error("There was an error loading model: "+t);const n=e[r];_.default.bind(v.ModelEntity).to(n).whenTargetNamed(r),v.Log.info("Model loaded: "+t)},c.modelExists=function(e){return this.models.find((t=>t.name===e))},i}(r(8184).ServiceProvider);g=c([d.injectable()],g),t.ModelServiceProvider=g},4210:function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function c(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(c,a)}u((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.QueryBuilder=void 0;const o=r(4065);let i=function(){function e(e){this._collectionFilter=null,this._collectionAggregation=[],this._collectionOrder=null,this._model=e}var t=e.prototype;return t.where=function(e){return this._collectionFilter=e,this},t.with=function(...e){const t=Reflect.getMetadata("mongo:refs",this._model)||{};for(let r of e){const e=t[r];if(!e)throw new o.InvalidRefSpecified(this._model.constructor.name,String(r));this._collectionAggregation.push({$lookup:{from:o.ModelEntity.formatNameForCollection(e.modelName,!0),localField:e._id,foreignField:"_id",as:r}}),e.array||this._collectionAggregation.push({$unwind:{path:"$"+o.ModelEntity.formatNameForCollection(e.modelName,e.array),preserveNullAndEmptyArrays:!0}})}return this},t.orderByDesc=function(e){return this._collectionOrder={key:String(e),direction:-1},this},t.orderByAsc=function(e){return this._collectionOrder={key:String(e),direction:1},this},t.resolveFilter=function(){var e,t;const r={};if(this._collectionOrder&&(null===(e=this._collectionOrder)||void 0===e?void 0:e.direction)&&(r.sort={},r.sort[this._collectionOrder.key]=this._collectionOrder.direction),null===(t=this._collectionAggregation)||void 0===t?void 0:t.length){const e=[{$match:this._collectionFilter},...this._collectionAggregation];return this._builderResult=this._model.repository().c.aggregate(e),this._builderResult}return this._builderResult=this._model.repository().c.find(this._collectionFilter,r),this._builderResult},t.first=function(){return n(this,void 0,void 0,(function*(){yield this.resolveFilter();const e=yield this._builderResult.limit(1).next();return e?this._model.repository().hydrate(e):null}))},t.get=function(){return n(this,void 0,void 0,(function*(){const e=yield this.resolveFilter();return(yield e.toArray()).map((e=>this._model.repository().hydrate(e)))}))},t.update=function(e,t){var r;return n(this,void 0,void 0,(function*(){const n=yield this._model.repository().c.updateMany(this._collectionFilter,{$set:e},t);return(null==t?void 0:t.returnMongoResponse)?n:(this._model.setMongoResponse(n),!!(null===(r=null==n?void 0:n.result)||void 0===r?void 0:r.ok))}))},t.cursor=function(){return n(this,void 0,void 0,(function*(){return this._builderResult}))},t.count=function(){return this._model.repository().count(this._collectionFilter)},e}();t.QueryBuilder=i},9994:function(e,t,r){"use strict";function n(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var o=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function c(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(c,a)}u((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.Repository=t.dehydrate=void 0;const i=r(1576),c=r(7548);function a(e){if(!e)return e;const t=Reflect.getMetadata("mongo:refs",e)||{};for(let r in t){const n=t[r],o=e[r];if(o){if(n.array){e[n._id]=o.map((e=>new c.ObjectId(e._id)));continue}e[n._id]=new c.ObjectId(o._id)}}const r=Object.assign({},e);for(let e in t)delete r[e];const n=Reflect.getMetadata("mongo:nested",e)||[];for(let{name:e,array:t}of n)r[e]&&(r[e]=t?r[e].map((e=>a(e))):a(r[e]));const o=Reflect.getMetadata("mongo:ignore",e)||{};for(const e in o)delete r[e];return r}t.dehydrate=a;let u=function(){function e(e,t,r,n={}){this.Type=e,this.collection=t.db(n.databaseName).collection(r),n.autoIndex&&this.createIndexes(!0)}var t,r,u=e.prototype;return u.createIndexes=function(e=!1){return o(this,void 0,void 0,(function*(){const t=Reflect.getMetadata("mongo:indexes",this.Type.prototype)||[];if(0==t.length)return null;if(e)for(let e of t)e.background=!0;return this.collection.createIndexes(t)}))},u.insert=function(e){return o(this,void 0,void 0,(function*(){const t=a(e),r=yield this.collection.insertOne(t);e._id=r.insertedId}))},u.update=function(e,t={}){return o(this,void 0,void 0,(function*(){const r=a(e);yield this.collection.replaceOne({_id:e._id},r,t)}))},u.save=function(e){return o(this,void 0,void 0,(function*(){e._id?yield this.update(e):yield this.insert(e)}))},u.findOne=function(e={}){return o(this,void 0,void 0,(function*(){return this.hydrate(yield this.collection.findOne(e))}))},u.findById=function(e){return o(this,void 0,void 0,(function*(){return this.findOne({_id:new c.ObjectId(e)})}))},u.findManyById=function(e){return o(this,void 0,void 0,(function*(){return this.find({_id:{$in:e.map((e=>new c.ObjectId(e)))}}).toArray()}))},u.remove=function(e){return o(this,void 0,void 0,(function*(){yield this.c.deleteOne({_id:e._id})}))},u.find=function(e,t){return this.collection.find(e,t).map((e=>this.hydrate(e)))},u.count=function(e){return o(this,void 0,void 0,(function*(){return this.collection.countDocuments(e)}))},u.hydrate=function(e){return e?i.plainToClass(this.Type,e):null},t=e,(r=[{key:"c",get:function(){return this.collection}}])&&n(t.prototype,r),e}();t.Repository=u},1732:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(931),t),o(r(1991),t),o(r(4210),t),o(r(9994),t),o(r(2474),t)},2474:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},8184:function(e,t,r){"use strict";var n=this&&this.__decorate||function(e,t,r,n){var o,i=arguments.length,c=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)c=Reflect.decorate(e,t,r,n);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(c=(i<3?o(c):i>3?o(t,r,c):o(t,r))||c);return i>3&&c&&Object.defineProperty(t,r,c),c};Object.defineProperty(t,"__esModule",{value:!0}),t.ServiceProvider=void 0;let o=function(){};o=n([r(2991).injectable()],o),t.ServiceProvider=o},9563:function(e,t,r){"use strict";var n=this&&this.__decorate||function(e,t,r,n){var o,i=arguments.length,c=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)c=Reflect.decorate(e,t,r,n);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(c=(i<3?o(c):i>3?o(t,r,c):o(t,r))||c);return i>3&&c&&Object.defineProperty(t,r,c),c};Object.defineProperty(t,"__esModule",{value:!0}),t.Storage=void 0;const o=r(8558),i=r(2991),c=r(4065);let a=function(){function e(){}return e.defaultProvider=function(){return c.Container.isBound(o.Config.storage.defaultProvider)?c.resolve(o.Config.storage.defaultProvider):null},e.files=function(e){return this.defaultProvider().files(e)},e.directories=function(e){return this.defaultProvider().directories(e)},e.makeDirectory=function(e){return this.defaultProvider().makeDirectory(e)},e.deleteDirectory=function(e){return this.defaultProvider().deleteDirectory(e)},e.fileExists=function(e){return this.defaultProvider().fileExists(e)},e.get=function(e){return this.defaultProvider().get(e)},e.put=function(e,t){return this.defaultProvider().put(e,t)},e.remove=function(e){return this.defaultProvider().remove(e)},e.url=function(e){return this.defaultProvider().url(e)},e.temporaryUrl=function(e,t){return this.defaultProvider().temporaryUrl(e,t)},e}();a=n([i.injectable()],a),t.Storage=a},4083:function(e,t,r){"use strict";var n=this&&this.__decorate||function(e,t,r,n){var o,i=arguments.length,c=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)c=Reflect.decorate(e,t,r,n);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(c=(i<3?o(c):i>3?o(t,r,c):o(t,r))||c);return i>3&&c&&Object.defineProperty(t,r,c),c};Object.defineProperty(t,"__esModule",{value:!0}),t.StorageProvider=void 0;let o=function(){};o=n([r(2991).injectable()],o),t.StorageProvider=o},2062:function(e,t,r){"use strict";function n(e,t){return(n=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var o=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),c=this&&this.__decorate||function(e,t,r,n){var o,i=arguments.length,c=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)c=Reflect.decorate(e,t,r,n);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(c=(i<3?o(c):i>3?o(t,r,c):o(t,r))||c);return i>3&&c&&Object.defineProperty(t,r,c),c},a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&o(t,e,r);return i(t,e),t},u=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0}),t.SpacesProvider=void 0;const s=r(8558),l=r(3480),f=a(r(5747)),d=r(2991),p=r(4065),h=r(2413);a(r(1669)).promisify(h.pipeline);let y=function(e){var t,r;function o(){var t;return(t=e.call(this)||this).spaces=new l.S3(s.Config.storage.spaces),t}r=e,(t=o).prototype=Object.create(r.prototype),t.prototype.constructor=t,n(t,r);var i=o.prototype;return i.files=function(e){return e.endsWith("/")||(e+="/"),new Promise(((t,r)=>{this.spaces.listObjectsV2({Bucket:s.Config.storage.spaces.bucket,Prefix:e},((e,n)=>{if(e)return r(e);t(n)}))}))},i.directories=function(e){return e.endsWith("/")||(e+="/"),new Promise(((t,r)=>{this.spaces.listObjectsV2({Bucket:s.Config.storage.spaces.bucket,Delimiter:e},((e,n)=>{if(e)return r(e);t(n.CommonPrefixes.map((e=>e.Prefix)))}))}))},i.makeDirectory=function(e){return e.endsWith("/")||(e+="/"),new Promise(((t,r)=>{this.spaces.putObject({Bucket:s.Config.storage.spaces.bucket,Key:e,Body:"",ACL:"public-read"},((e,n)=>{if(e)return r(e);t(!!n.ETag)}))}))},i.deleteDirectory=function(e){return e.endsWith("/")||(e+="/"),new Promise(((t,r)=>{this.spaces.deleteObject({Bucket:s.Config.storage.spaces.bucket,Key:e},((e,n)=>{if(e)return r(e);t(n)}))}))},i.fileExists=function(e){return new Promise(((t,r)=>{this.spaces.headObject({Bucket:s.Config.storage.spaces.bucket,Key:e},((e,n)=>{if(e)return r(e);t(!!n.ContentLength)}))}))},i.get=function(e){return new Promise(((t,r)=>{this.spaces.getObject({Bucket:s.Config.storage.spaces.bucket,Key:e},((e,n)=>{if(e)return r(e);t(Buffer.from(n.Body).toString())}))}))},i.put=function(e,t){return new Promise(((r,n)=>{const o=t.filename.split(".").pop(),i=p.Encryption.random()+"."+o,c=f.createReadStream(t.filepath),a=e+"/"+(t.storeAs?t.storeAs:i);this.spaces.putObject({ACL:"public-read",Bucket:s.Config.storage.spaces.bucket,Key:a,Body:c},((e,o)=>{if(e)return n(e);r({url:`${s.Config.storage.spaces.url}/${a}`,path:a,originalName:t.filename})}))}))},i.remove=function(e){return new Promise(((t,r)=>{this.spaces.deleteObject({Bucket:s.Config.storage.spaces.bucket,Key:e},((e,n)=>{if(e)return r(e);t(!0)}))}))},i.url=function(e){let t=s.Config.storage.spaces.url;return e.startsWith("/")&&(e=e.slice(1)),t.endsWith("/")&&(t=t.slice(0,-1)),t+"/"+e},i.temporaryUrl=function(e,t){return this.spaces.getSignedUrlPromise("getObject",{Bucket:s.Config.storage.spaces.bucket,Key:e,Expires:t})},o}(p.StorageProvider);y=c([d.injectable(),u("design:paramtypes",[])],y),t.SpacesProvider=y},5923:function(e,t,r){"use strict";function n(e,t){return(n=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var o=this&&this.__decorate||function(e,t,r,n){var o,i=arguments.length,c=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)c=Reflect.decorate(e,t,r,n);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(c=(i<3?o(c):i>3?o(t,r,c):o(t,r))||c);return i>3&&c&&Object.defineProperty(t,r,c),c},i=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function c(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(c,a)}u((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.StorageServiceProvider=void 0;const c=r(4065),a=r(2991);let u=function(e){var t,r;function o(){return e.apply(this,arguments)||this}r=e,(t=o).prototype=Object.create(r.prototype),t.prototype.constructor=t,n(t,r);var a=o.prototype;return a.registerBindings=function(){return i(this,void 0,void 0,(function*(){c.Container.bind(c.SpacesProvider).to(c.SpacesProvider),c.Container.bind(c.Storage).to(c.Storage)}))},a.boot=function(){return i(this,void 0,void 0,(function*(){}))},o}(c.ServiceProvider);u=o([a.injectable()],u),t.StorageServiceProvider=u},9328:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(9563),t),o(r(4083),t),o(r(2062),t),o(r(5923),t)},4065:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.HTTP_REQUEST_IDENTIFIER=t.AUTHED_USER_IDENTIFIER=t.HTTP_CONTEXT_IDENTIFIER=t.LOGGER_IDENTIFIER=t.CONTAINER_IDENTIFIER=t.Container=t.whenBootstrapped=void 0,o(r(8696),t);var c=r(9377);Object.defineProperty(t,"whenBootstrapped",{enumerable:!0,get:function(){return c.whenBootstrapped}});var a=r(7347);Object.defineProperty(t,"Container",{enumerable:!0,get:function(){return i(a).default}}),Object.defineProperty(t,"CONTAINER_IDENTIFIER",{enumerable:!0,get:function(){return a.CONTAINER_IDENTIFIER}}),Object.defineProperty(t,"LOGGER_IDENTIFIER",{enumerable:!0,get:function(){return a.LOGGER_IDENTIFIER}}),Object.defineProperty(t,"HTTP_CONTEXT_IDENTIFIER",{enumerable:!0,get:function(){return a.HTTP_CONTEXT_IDENTIFIER}}),Object.defineProperty(t,"AUTHED_USER_IDENTIFIER",{enumerable:!0,get:function(){return a.AUTHED_USER_IDENTIFIER}}),Object.defineProperty(t,"HTTP_REQUEST_IDENTIFIER",{enumerable:!0,get:function(){return a.HTTP_REQUEST_IDENTIFIER}}),o(r(4857),t),o(r(9893),t),o(r(5093),t),o(r(4888),t),o(r(2237),t),o(r(3183),t),o(r(8375),t),o(r(7598),t),o(r(8847),t),o(r(4060),t),o(r(4628),t),o(r(3643),t),o(r(5941),t),o(r(1443),t),o(r(6436),t),o(r(9522),t),o(r(1732),t),o(r(8184),t),o(r(2062),t),o(r(9328),t)},991:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(9893),t),o(r(5093),t),o(r(4888),t),o(r(3183),t),o(r(8375),t),o(r(7598),t),o(r(8847),t),o(r(4060),t),o(r(4628),t),o(r(3643),t),o(r(5941),t),o(r(1443),t),o(r(6436),t),o(r(9522),t),o(r(1732),t),o(r(8184),t),o(r(2062),t),o(r(9328),t),o(r(4065),t)},1962:(e,t,r)=>{var n={"./Auth/AuthController":1507,"./Auth/AuthController.ts":1507};function o(e){var t=i(e);return r(t)}function i(e){if(!r.o(n,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return n[e]}o.keys=function(){return Object.keys(n)},o.resolve=i,e.exports=o,o.id=1962},6569:(e,t,r)=>{var n={"./User":9510,"./User.ts":9510};function o(e){var t=i(e);return r(t)}function i(e){if(!r.o(n,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return n[e]}o.keys=function(){return Object.keys(n)},o.resolve=i,e.exports=o,o.id=6569},7303:e=>{"use strict";e.exports=require("async_hooks")},3480:e=>{"use strict";e.exports=require("aws-sdk")},6552:e=>{"use strict";e.exports=require("bcrypt")},2242:e=>{"use strict";e.exports=require("chalk")},5661:e=>{"use strict";e.exports=require("chalk-console")},1576:e=>{"use strict";e.exports=require("class-transformer")},516:e=>{"use strict";e.exports=require("class-validator")},334:e=>{"use strict";e.exports=require("dotenv")},6495:e=>{"use strict";e.exports=require("fastify")},1495:e=>{"use strict";e.exports=require("fastify-multipart")},5747:e=>{"use strict";e.exports=require("fs")},6878:e=>{"use strict";e.exports=require("glob")},8823:e=>{"use strict";e.exports=require("http-status-codes")},2991:e=>{"use strict";e.exports=require("inversify")},9722:e=>{"use strict";e.exports=require("jsonwebtoken")},2844:e=>{"use strict";e.exports=require("middie")},7548:e=>{"use strict";e.exports=require("mongodb")},3537:e=>{"use strict";e.exports=require("node-cache-redis")},6786:e=>{"use strict";e.exports=require("node-fetch")},5622:e=>{"use strict";e.exports=require("path")},6329:e=>{"use strict";e.exports=require("pluralize")},5337:e=>{"use strict";e.exports=require("simple-crypto-js")},2413:e=>{"use strict";e.exports=require("stream")},1669:e=>{"use strict";e.exports=require("util")},944:e=>{"use strict";e.exports=require("winston")},2510:e=>{"use strict";e.exports=require("winston-daily-rotate-file")}},t={};function r(n){var o=t[n];if(void 0!==o)return o.exports;var i=t[n]={exports:{}};return e[n].call(i.exports,i,i.exports,r),i.exports}r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r(991)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,